
PortableLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803f00  00803f00  00000542  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00803f00  00803f00  00000542  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000542  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000005b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002eae  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001933  00000000  00000000  00003526  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b5  00000000  00000000  00004e59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  00005610  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a1f  00000000  00000000  00005958  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d39  00000000  00000000  00007377  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000080b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	1b c1       	rjmp	.+566    	; 0x248 <__vector_8>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	07 c1       	rjmp	.+526    	; 0x224 <__vector_10>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	ef c0       	rjmp	.+478    	; 0x202 <__vector_17>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_clear_bss>:
  40:	2f e3       	ldi	r18, 0x3F	; 63
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	bf e3       	ldi	r27, 0x3F	; 63
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	aa 30       	cpi	r26, 0x0A	; 10
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	6f d0       	rcall	.+222    	; 0x130 <main>
  52:	3b c2       	rjmp	.+1142   	; 0x4ca <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <SetPWM>:
	return a;
}

void SetPWM(uint16_t val)
{
	if (val > 0)
  56:	00 97       	sbiw	r24, 0x00	; 0
  58:	39 f0       	breq	.+14     	; 0x68 <SetPWM+0x12>
	{
		TCA0.SINGLE.INTCTRL = TCA_SINGLE_CMP0_bm | TCA_SINGLE_OVF_bm;
  5a:	e0 e0       	ldi	r30, 0x00	; 0
  5c:	fa e0       	ldi	r31, 0x0A	; 10
  5e:	21 e1       	ldi	r18, 0x11	; 17
  60:	22 87       	std	Z+10, r18	; 0x0a
		LED_PWM(val);
  62:	80 a7       	std	Z+40, r24	; 0x28
  64:	91 a7       	std	Z+41, r25	; 0x29
  66:	08 95       	ret
	}
	else
	{
		TCA0.SINGLE.INTCTRL = 0;
  68:	10 92 0a 0a 	sts	0x0A0A, r1	; 0x800a0a <__RODATA_PM_OFFSET__+0x7f8a0a>
		PORTA.OUTCLR = 1 << 2;
  6c:	84 e0       	ldi	r24, 0x04	; 4
  6e:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__RODATA_PM_OFFSET__+0x7f8406>
  72:	08 95       	ret

00000074 <ADCProcess>:
	}
}

void ADCProcess()
{
	if (~ADC0.COMMAND & ADC_STCONV_bm && !ADC_prepared_) //the ADC isn't doing anything
  74:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
  78:	80 fd       	sbrc	r24, 0
  7a:	59 c0       	rjmp	.+178    	; 0x12e <__DATA_REGION_LENGTH__+0x2e>
  7c:	80 91 08 3f 	lds	r24, 0x3F08	; 0x803f08 <ADC_prepared_>
  80:	81 11       	cpse	r24, r1
  82:	55 c0       	rjmp	.+170    	; 0x12e <__DATA_REGION_LENGTH__+0x2e>
	{
		//let's save the value and prep next measurement
		ADC_result_[(uint8_t)current_ADC_source_] = ADC0.RES;
  84:	80 91 09 3f 	lds	r24, 0x3F09	; 0x803f09 <current_ADC_source_>
  88:	e8 2f       	mov	r30, r24
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	20 91 10 06 	lds	r18, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
  90:	30 91 11 06 	lds	r19, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>
  94:	ee 0f       	add	r30, r30
  96:	ff 1f       	adc	r31, r31
  98:	e0 50       	subi	r30, 0x00	; 0
  9a:	f1 4c       	sbci	r31, 0xC1	; 193
  9c:	20 83       	st	Z, r18
  9e:	31 83       	std	Z+1, r19	; 0x01
		
		switch (current_ADC_source_)
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	41 f0       	breq	.+16     	; 0xb4 <__EEPROM_REGION_LENGTH__+0x34>
  a4:	18 f0       	brcs	.+6      	; 0xac <__EEPROM_REGION_LENGTH__+0x2c>
  a6:	82 30       	cpi	r24, 0x02	; 2
  a8:	49 f0       	breq	.+18     	; 0xbc <__EEPROM_REGION_LENGTH__+0x3c>
  aa:	0b c0       	rjmp	.+22     	; 0xc2 <__EEPROM_REGION_LENGTH__+0x42>
		{
			case ADC_SOURCE_POT:
				current_ADC_source_ = ADC_SOURCE_SHUNT_BEFORE;
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	80 93 09 3f 	sts	0x3F09, r24	; 0x803f09 <current_ADC_source_>
				break;
  b2:	09 c0       	rjmp	.+18     	; 0xc6 <__EEPROM_REGION_LENGTH__+0x46>
			
			case ADC_SOURCE_SHUNT_BEFORE:
				current_ADC_source_ = ADC_SOURCE_SHUNT_AFTER;
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	80 93 09 3f 	sts	0x3F09, r24	; 0x803f09 <current_ADC_source_>
				break;
  ba:	05 c0       	rjmp	.+10     	; 0xc6 <__EEPROM_REGION_LENGTH__+0x46>
				
			case ADC_SOURCE_SHUNT_AFTER:
				current_ADC_source_ = ADC_SOURCE_POT;
  bc:	10 92 09 3f 	sts	0x3F09, r1	; 0x803f09 <current_ADC_source_>
				break;
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <__EEPROM_REGION_LENGTH__+0x46>
				
			default:
				current_ADC_source_ = ADC_SOURCE_POT;
  c2:	10 92 09 3f 	sts	0x3F09, r1	; 0x803f09 <current_ADC_source_>
		}
		
		// now that it is changed to the next value, prepare the ADC for the measurement
		switch (current_ADC_source_)
  c6:	80 91 09 3f 	lds	r24, 0x3F09	; 0x803f09 <current_ADC_source_>
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	81 f0       	breq	.+32     	; 0xee <__EEPROM_REGION_LENGTH__+0x6e>
  ce:	28 f0       	brcs	.+10     	; 0xda <__EEPROM_REGION_LENGTH__+0x5a>
  d0:	82 30       	cpi	r24, 0x02	; 2
  d2:	b9 f0       	breq	.+46     	; 0x102 <__DATA_REGION_LENGTH__+0x2>
  d4:	83 30       	cpi	r24, 0x03	; 3
  d6:	f9 f0       	breq	.+62     	; 0x116 <__DATA_REGION_LENGTH__+0x16>
  d8:	27 c0       	rjmp	.+78     	; 0x128 <__DATA_REGION_LENGTH__+0x28>
		{
			case ADC_SOURCE_POT:
				ADC0.MUXPOS = ADC_MUXPOS_AIN3_gc;
  da:	e0 e0       	ldi	r30, 0x00	; 0
  dc:	f6 e0       	ldi	r31, 0x06	; 6
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	86 83       	std	Z+6, r24	; 0x06
				ADC0.CTRLC = ADC_PRESC_DIV32_gc | ADC_REFSEL_VDDREF_gc;
  e2:	84 e1       	ldi	r24, 0x14	; 20
  e4:	82 83       	std	Z+2, r24	; 0x02
				EVSYS.SYNCCH0 = EVSYS_SYNCCH0_TCA0_CMP0_gc;
  e6:	84 e0       	ldi	r24, 0x04	; 4
  e8:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <__RODATA_PM_OFFSET__+0x7f818a>
				break;
  ec:	1d c0       	rjmp	.+58     	; 0x128 <__DATA_REGION_LENGTH__+0x28>
			
			case ADC_SOURCE_SHUNT_BEFORE:
				ADC0.MUXPOS = ADC_MUXPOS_AIN7_gc;
  ee:	e0 e0       	ldi	r30, 0x00	; 0
  f0:	f6 e0       	ldi	r31, 0x06	; 6
  f2:	87 e0       	ldi	r24, 0x07	; 7
  f4:	86 83       	std	Z+6, r24	; 0x06
				ADC0.CTRLC = ADC_PRESC_DIV32_gc | ADC_REFSEL_INTREF_gc;
  f6:	84 e0       	ldi	r24, 0x04	; 4
  f8:	82 83       	std	Z+2, r24	; 0x02
				EVSYS.SYNCCH0 = EVSYS_SYNCCH0_TCA0_OVF_LUNF_gc;
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <__RODATA_PM_OFFSET__+0x7f818a>
				break;
 100:	13 c0       	rjmp	.+38     	; 0x128 <__DATA_REGION_LENGTH__+0x28>
				
			case ADC_SOURCE_SHUNT_AFTER:
				ADC0.MUXPOS = ADC_MUXPOS_AIN6_gc;
 102:	e0 e0       	ldi	r30, 0x00	; 0
 104:	f6 e0       	ldi	r31, 0x06	; 6
 106:	86 e0       	ldi	r24, 0x06	; 6
 108:	86 83       	std	Z+6, r24	; 0x06
				ADC0.CTRLC = ADC_PRESC_DIV32_gc | ADC_REFSEL_INTREF_gc;
 10a:	84 e0       	ldi	r24, 0x04	; 4
 10c:	82 83       	std	Z+2, r24	; 0x02
				EVSYS.SYNCCH0 = EVSYS_SYNCCH0_TCA0_OVF_LUNF_gc;
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <__RODATA_PM_OFFSET__+0x7f818a>
				break;
 114:	09 c0       	rjmp	.+18     	; 0x128 <__DATA_REGION_LENGTH__+0x28>
				
			case ADC_SOURCE_SUPPLY:
				ADC0.MUXPOS = ADC_MUXPOS_INTREF_gc;
 116:	e0 e0       	ldi	r30, 0x00	; 0
 118:	f6 e0       	ldi	r31, 0x06	; 6
 11a:	8d e1       	ldi	r24, 0x1D	; 29
 11c:	86 83       	std	Z+6, r24	; 0x06
				ADC0.CTRLC = ADC_PRESC_DIV32_gc | ADC_REFSEL_VDDREF_gc;
 11e:	84 e1       	ldi	r24, 0x14	; 20
 120:	82 83       	std	Z+2, r24	; 0x02
				EVSYS.SYNCCH0 = EVSYS_SYNCCH0_TCA0_CMP0_gc;
 122:	84 e0       	ldi	r24, 0x04	; 4
 124:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <__RODATA_PM_OFFSET__+0x7f818a>
			default:
				break; // make the compiler not cry
			
		}
		
		ADC_prepared_ = true;
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	80 93 08 3f 	sts	0x3F08, r24	; 0x803f08 <ADC_prepared_>
 12e:	08 95       	ret

00000130 <main>:
uint16_t ADC_result_[ADC_SOURCE_COUNT] = {0};

int main(void)
{
	//setup system clock (20MHz)
	ccp_write_io((void *) & (CLKCTRL.MCLKCTRLA), 0x0);
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	80 e6       	ldi	r24, 0x60	; 96
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	c3 d1       	rcall	.+902    	; 0x4be <ccp_write_io>
	ccp_write_io((void *) & (CLKCTRL.MCLKCTRLB), 0x0);
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	81 e6       	ldi	r24, 0x61	; 97
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	bf d1       	rcall	.+894    	; 0x4be <ccp_write_io>
	ccp_write_io((void *) & (CLKCTRL.OSC20MCTRLA), 0b10);
 140:	62 e0       	ldi	r22, 0x02	; 2
 142:	80 e7       	ldi	r24, 0x70	; 112
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	bb d1       	rcall	.+886    	; 0x4be <ccp_write_io>
	while(CLKCTRL.MCLKSTATUS & 1);
 148:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__RODATA_PM_OFFSET__+0x7f8063>
 14c:	80 fd       	sbrc	r24, 0
 14e:	fc cf       	rjmp	.-8      	; 0x148 <main+0x18>
	
	TCA0.SINGLE.CTRLA = TCA_SINGLE_ENABLE_bm;
 150:	e0 e0       	ldi	r30, 0x00	; 0
 152:	fa e0       	ldi	r31, 0x0A	; 10
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	80 83       	st	Z, r24
	TCA0.SINGLE.CTRLB = TCA_SINGLE_WGMODE_SINGLESLOPE_gc;
 158:	93 e0       	ldi	r25, 0x03	; 3
 15a:	91 83       	std	Z+1, r25	; 0x01
	TCA0.SINGLE.INTCTRL = TCA_SINGLE_CMP0_bm | TCA_SINGLE_OVF_bm;
 15c:	21 e1       	ldi	r18, 0x11	; 17
 15e:	22 87       	std	Z+10, r18	; 0x0a
	TCA0.SINGLE.DBGCTRL = TCA_SINGLE_DBGRUN_bm;
 160:	86 87       	std	Z+14, r24	; 0x0e
	TCA0.SINGLE.PER = 0x3FF;
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	33 e0       	ldi	r19, 0x03	; 3
 166:	26 a3       	std	Z+38, r18	; 0x26
 168:	37 a3       	std	Z+39, r19	; 0x27
	LED_PWM(2);
 16a:	22 e0       	ldi	r18, 0x02	; 2
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	20 a7       	std	Z+40, r18	; 0x28
 170:	31 a7       	std	Z+41, r19	; 0x29
	
	TCB0.CTRLA = TCB_CLKSEL_CLKTCA_gc | TCB_ENABLE_bm;
 172:	e0 e4       	ldi	r30, 0x40	; 64
 174:	fa e0       	ldi	r31, 0x0A	; 10
 176:	25 e0       	ldi	r18, 0x05	; 5
 178:	20 83       	st	Z, r18
	TCB0.CTRLB = TCB_CNTMODE_SINGLE_gc;
 17a:	26 e0       	ldi	r18, 0x06	; 6
 17c:	21 83       	std	Z+1, r18	; 0x01
	TCB0.EVCTRL = TCB_CAPTEI_bm; // the timer is started by making a pulse at its event channel
 17e:	84 83       	std	Z+4, r24	; 0x04
	TCB0.CCMP = 5;
 180:	25 e0       	ldi	r18, 0x05	; 5
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	24 87       	std	Z+12, r18	; 0x0c
 186:	35 87       	std	Z+13, r19	; 0x0d
	
	EVSYS.SYNCCH0 = EVSYS_SYNCCH0_TCA0_OVF_LUNF_gc;
 188:	e0 e8       	ldi	r30, 0x80	; 128
 18a:	f1 e0       	ldi	r31, 0x01	; 1
 18c:	22 e0       	ldi	r18, 0x02	; 2
 18e:	22 87       	std	Z+10, r18	; 0x0a
	EVSYS.ASYNCUSER0 = EVSYS_ASYNCUSER0_SYNCCH0_gc;
 190:	82 8b       	std	Z+18, r24	; 0x12
	EVSYS.SYNCCH1 = EVSYS_SYNCCH0_TCB0_gc;
 192:	83 87       	std	Z+11, r24	; 0x0b
	EVSYS.ASYNCUSER1 = EVSYS_ASYNCUSER1_SYNCCH1_gc;
 194:	23 8b       	std	Z+19, r18	; 0x13
	
	VREF.CTRLA = VREF_ADC0REFSEL_0V55_gc;
 196:	e0 ea       	ldi	r30, 0xA0	; 160
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	10 82       	st	Z, r1
	VREF.CTRLB = VREF_ADC0REFSEL_0_bm;
 19c:	20 e1       	ldi	r18, 0x10	; 16
 19e:	21 83       	std	Z+1, r18	; 0x01
	
	ADC0.CTRLA = ADC_RUNSTBY_bm | ADC_ENABLE_bm;
 1a0:	e0 e0       	ldi	r30, 0x00	; 0
 1a2:	f6 e0       	ldi	r31, 0x06	; 6
 1a4:	21 e8       	ldi	r18, 0x81	; 129
 1a6:	20 83       	st	Z, r18
	ADC0.CTRLC = ADC_PRESC_DIV32_gc | ADC_REFSEL_VDDREF_gc;
 1a8:	24 e1       	ldi	r18, 0x14	; 20
 1aa:	22 83       	std	Z+2, r18	; 0x02
	ADC0.CTRLD = ADC_INITDLY_DLY16_gc;
 1ac:	20 e2       	ldi	r18, 0x20	; 32
 1ae:	23 83       	std	Z+3, r18	; 0x03
	ADC0.EVCTRL = ADC_STARTEI_bm;
 1b0:	81 87       	std	Z+9, r24	; 0x09
	ADC0.INTCTRL = ADC_RESRDY_bm;
 1b2:	82 87       	std	Z+10, r24	; 0x0a
	ADC0.MUXPOS = ADC_MUXPOS_AIN3_gc;
 1b4:	96 83       	std	Z+6, r25	; 0x06
	
	// basically, TCA overflows, triggers TCB, TCB counts up to 5, triggers ADC, that triggers when it's ready, cycle repeats. I somewhat setup the peripherals for it but I haven't done the actual routing
	
    PORTA.DIRSET = 1 << 2;
 1b6:	84 e0       	ldi	r24, 0x04	; 4
 1b8:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__RODATA_PM_OFFSET__+0x7f8401>
	
	sei();
 1bc:	78 94       	sei
	
    while (1) 
    {		
		ADCProcess();
 1be:	5a df       	rcall	.-332    	; 0x74 <ADCProcess>
		SetPWM(mapClamp(ADC_result_[ADC_SOURCE_POT], 5, 1023, 0, 600));		
 1c0:	60 91 00 3f 	lds	r22, 0x3F00	; 0x803f00 <__DATA_REGION_ORIGIN__>
 1c4:	70 91 01 3f 	lds	r23, 0x3F01	; 0x803f01 <__DATA_REGION_ORIGIN__+0x1>
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	1f 92       	push	r1
 1ce:	1f 92       	push	r1
 1d0:	22 e0       	ldi	r18, 0x02	; 2
 1d2:	2f 93       	push	r18
 1d4:	28 e5       	ldi	r18, 0x58	; 88
 1d6:	2f 93       	push	r18
 1d8:	a1 2c       	mov	r10, r1
 1da:	b1 2c       	mov	r11, r1
 1dc:	65 01       	movw	r12, r10
 1de:	ee 24       	eor	r14, r14
 1e0:	ea 94       	dec	r14
 1e2:	13 e0       	ldi	r17, 0x03	; 3
 1e4:	f1 2e       	mov	r15, r17
 1e6:	00 e0       	ldi	r16, 0x00	; 0
 1e8:	10 e0       	ldi	r17, 0x00	; 0
 1ea:	25 e0       	ldi	r18, 0x05	; 5
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	40 e0       	ldi	r20, 0x00	; 0
 1f0:	50 e0       	ldi	r21, 0x00	; 0
 1f2:	3c d0       	rcall	.+120    	; 0x26c <mapClamp>
 1f4:	cb 01       	movw	r24, r22
 1f6:	2f df       	rcall	.-418    	; 0x56 <SetPWM>
 1f8:	0f 90       	pop	r0
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	de cf       	rjmp	.-68     	; 0x1be <main+0x8e>

00000202 <__vector_17>:
		ADC_prepared_ = true;
	}
}

ISR(ADC0_RESRDY_vect)
{
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	8f 93       	push	r24
	ADC_prepared_ = false;
 20e:	10 92 08 3f 	sts	0x3F08, r1	; 0x803f08 <ADC_prepared_>
	ADC0.INTFLAGS = ADC_RESRDY_bm;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__RODATA_PM_OFFSET__+0x7f860b>
}
 218:	8f 91       	pop	r24
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <__vector_10>:

ISR(TCA0_CMP0_vect)
{
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	8f 93       	push	r24
	PORTA.OUTCLR = 1 << 2;
 230:	84 e0       	ldi	r24, 0x04	; 4
 232:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__RODATA_PM_OFFSET__+0x7f8406>
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_CMP0_bm;
 236:	80 e1       	ldi	r24, 0x10	; 16
 238:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7f8a0b>
}
 23c:	8f 91       	pop	r24
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <__vector_8>:

ISR(TCA0_OVF_vect)
{
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	8f 93       	push	r24
	PORTA.OUTSET = 1 << 2;
 254:	84 e0       	ldi	r24, 0x04	; 4
 256:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__RODATA_PM_OFFSET__+0x7f8405>
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7f8a0b>
}
 260:	8f 91       	pop	r24
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <mapClamp>:
 26c:	4f 92       	push	r4
 26e:	5f 92       	push	r5
 270:	6f 92       	push	r6
 272:	7f 92       	push	r7
 274:	af 92       	push	r10
 276:	bf 92       	push	r11
 278:	cf 92       	push	r12
 27a:	df 92       	push	r13
 27c:	ef 92       	push	r14
 27e:	ff 92       	push	r15
 280:	0f 93       	push	r16
 282:	1f 93       	push	r17
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
 28c:	29 01       	movw	r4, r18
 28e:	3a 01       	movw	r6, r20
 290:	29 89       	ldd	r18, Y+17	; 0x11
 292:	3a 89       	ldd	r19, Y+18	; 0x12
 294:	4b 89       	ldd	r20, Y+19	; 0x13
 296:	5c 89       	ldd	r21, Y+20	; 0x14
 298:	a2 16       	cp	r10, r18
 29a:	b3 06       	cpc	r11, r19
 29c:	c4 06       	cpc	r12, r20
 29e:	d5 06       	cpc	r13, r21
 2a0:	94 f5       	brge	.+100    	; 0x306 <mapClamp+0x9a>
 2a2:	9b 01       	movw	r18, r22
 2a4:	ac 01       	movw	r20, r24
 2a6:	24 19       	sub	r18, r4
 2a8:	35 09       	sbc	r19, r5
 2aa:	46 09       	sbc	r20, r6
 2ac:	57 09       	sbc	r21, r7
 2ae:	69 89       	ldd	r22, Y+17	; 0x11
 2b0:	7a 89       	ldd	r23, Y+18	; 0x12
 2b2:	8b 89       	ldd	r24, Y+19	; 0x13
 2b4:	9c 89       	ldd	r25, Y+20	; 0x14
 2b6:	6a 19       	sub	r22, r10
 2b8:	7b 09       	sbc	r23, r11
 2ba:	8c 09       	sbc	r24, r12
 2bc:	9d 09       	sbc	r25, r13
 2be:	9c d0       	rcall	.+312    	; 0x3f8 <__mulsi3>
 2c0:	a8 01       	movw	r20, r16
 2c2:	97 01       	movw	r18, r14
 2c4:	24 19       	sub	r18, r4
 2c6:	35 09       	sbc	r19, r5
 2c8:	46 09       	sbc	r20, r6
 2ca:	57 09       	sbc	r21, r7
 2cc:	a4 d0       	rcall	.+328    	; 0x416 <__divmodsi4>
 2ce:	d6 01       	movw	r26, r12
 2d0:	c5 01       	movw	r24, r10
 2d2:	82 0f       	add	r24, r18
 2d4:	93 1f       	adc	r25, r19
 2d6:	a4 1f       	adc	r26, r20
 2d8:	b5 1f       	adc	r27, r21
 2da:	49 88       	ldd	r4, Y+17	; 0x11
 2dc:	5a 88       	ldd	r5, Y+18	; 0x12
 2de:	6b 88       	ldd	r6, Y+19	; 0x13
 2e0:	7c 88       	ldd	r7, Y+20	; 0x14
 2e2:	84 15       	cp	r24, r4
 2e4:	95 05       	cpc	r25, r5
 2e6:	a6 05       	cpc	r26, r6
 2e8:	b7 05       	cpc	r27, r7
 2ea:	14 f4       	brge	.+4      	; 0x2f0 <mapClamp+0x84>
 2ec:	2c 01       	movw	r4, r24
 2ee:	3d 01       	movw	r6, r26
 2f0:	c6 01       	movw	r24, r12
 2f2:	b5 01       	movw	r22, r10
 2f4:	a4 14       	cp	r10, r4
 2f6:	b5 04       	cpc	r11, r5
 2f8:	c6 04       	cpc	r12, r6
 2fa:	d7 04       	cpc	r13, r7
 2fc:	0c f0       	brlt	.+2      	; 0x300 <mapClamp+0x94>
 2fe:	6d c0       	rjmp	.+218    	; 0x3da <mapClamp+0x16e>
 300:	c3 01       	movw	r24, r6
 302:	b2 01       	movw	r22, r4
 304:	6a c0       	rjmp	.+212    	; 0x3da <mapClamp+0x16e>
 306:	29 89       	ldd	r18, Y+17	; 0x11
 308:	3a 89       	ldd	r19, Y+18	; 0x12
 30a:	4b 89       	ldd	r20, Y+19	; 0x13
 30c:	5c 89       	ldd	r21, Y+20	; 0x14
 30e:	2a 15       	cp	r18, r10
 310:	3b 05       	cpc	r19, r11
 312:	4c 05       	cpc	r20, r12
 314:	5d 05       	cpc	r21, r13
 316:	8c f5       	brge	.+98     	; 0x37a <mapClamp+0x10e>
 318:	9b 01       	movw	r18, r22
 31a:	ac 01       	movw	r20, r24
 31c:	24 19       	sub	r18, r4
 31e:	35 09       	sbc	r19, r5
 320:	46 09       	sbc	r20, r6
 322:	57 09       	sbc	r21, r7
 324:	69 89       	ldd	r22, Y+17	; 0x11
 326:	7a 89       	ldd	r23, Y+18	; 0x12
 328:	8b 89       	ldd	r24, Y+19	; 0x13
 32a:	9c 89       	ldd	r25, Y+20	; 0x14
 32c:	6a 19       	sub	r22, r10
 32e:	7b 09       	sbc	r23, r11
 330:	8c 09       	sbc	r24, r12
 332:	9d 09       	sbc	r25, r13
 334:	61 d0       	rcall	.+194    	; 0x3f8 <__mulsi3>
 336:	a8 01       	movw	r20, r16
 338:	97 01       	movw	r18, r14
 33a:	24 19       	sub	r18, r4
 33c:	35 09       	sbc	r19, r5
 33e:	46 09       	sbc	r20, r6
 340:	57 09       	sbc	r21, r7
 342:	69 d0       	rcall	.+210    	; 0x416 <__divmodsi4>
 344:	d6 01       	movw	r26, r12
 346:	c5 01       	movw	r24, r10
 348:	82 0f       	add	r24, r18
 34a:	93 1f       	adc	r25, r19
 34c:	a4 1f       	adc	r26, r20
 34e:	b5 1f       	adc	r27, r21
 350:	76 01       	movw	r14, r12
 352:	65 01       	movw	r12, r10
 354:	8c 15       	cp	r24, r12
 356:	9d 05       	cpc	r25, r13
 358:	ae 05       	cpc	r26, r14
 35a:	bf 05       	cpc	r27, r15
 35c:	14 f4       	brge	.+4      	; 0x362 <mapClamp+0xf6>
 35e:	6c 01       	movw	r12, r24
 360:	7d 01       	movw	r14, r26
 362:	69 89       	ldd	r22, Y+17	; 0x11
 364:	7a 89       	ldd	r23, Y+18	; 0x12
 366:	8b 89       	ldd	r24, Y+19	; 0x13
 368:	9c 89       	ldd	r25, Y+20	; 0x14
 36a:	6c 15       	cp	r22, r12
 36c:	7d 05       	cpc	r23, r13
 36e:	8e 05       	cpc	r24, r14
 370:	9f 05       	cpc	r25, r15
 372:	9c f5       	brge	.+102    	; 0x3da <mapClamp+0x16e>
 374:	c7 01       	movw	r24, r14
 376:	b6 01       	movw	r22, r12
 378:	30 c0       	rjmp	.+96     	; 0x3da <mapClamp+0x16e>
 37a:	9b 01       	movw	r18, r22
 37c:	ac 01       	movw	r20, r24
 37e:	24 19       	sub	r18, r4
 380:	35 09       	sbc	r19, r5
 382:	46 09       	sbc	r20, r6
 384:	57 09       	sbc	r21, r7
 386:	69 89       	ldd	r22, Y+17	; 0x11
 388:	7a 89       	ldd	r23, Y+18	; 0x12
 38a:	8b 89       	ldd	r24, Y+19	; 0x13
 38c:	9c 89       	ldd	r25, Y+20	; 0x14
 38e:	6a 19       	sub	r22, r10
 390:	7b 09       	sbc	r23, r11
 392:	8c 09       	sbc	r24, r12
 394:	9d 09       	sbc	r25, r13
 396:	30 d0       	rcall	.+96     	; 0x3f8 <__mulsi3>
 398:	a8 01       	movw	r20, r16
 39a:	97 01       	movw	r18, r14
 39c:	24 19       	sub	r18, r4
 39e:	35 09       	sbc	r19, r5
 3a0:	46 09       	sbc	r20, r6
 3a2:	57 09       	sbc	r21, r7
 3a4:	38 d0       	rcall	.+112    	; 0x416 <__divmodsi4>
 3a6:	d6 01       	movw	r26, r12
 3a8:	c5 01       	movw	r24, r10
 3aa:	82 0f       	add	r24, r18
 3ac:	93 1f       	adc	r25, r19
 3ae:	a4 1f       	adc	r26, r20
 3b0:	b5 1f       	adc	r27, r21
 3b2:	09 89       	ldd	r16, Y+17	; 0x11
 3b4:	1a 89       	ldd	r17, Y+18	; 0x12
 3b6:	2b 89       	ldd	r18, Y+19	; 0x13
 3b8:	3c 89       	ldd	r19, Y+20	; 0x14
 3ba:	80 17       	cp	r24, r16
 3bc:	91 07       	cpc	r25, r17
 3be:	a2 07       	cpc	r26, r18
 3c0:	b3 07       	cpc	r27, r19
 3c2:	14 f4       	brge	.+4      	; 0x3c8 <mapClamp+0x15c>
 3c4:	8c 01       	movw	r16, r24
 3c6:	9d 01       	movw	r18, r26
 3c8:	c6 01       	movw	r24, r12
 3ca:	b5 01       	movw	r22, r10
 3cc:	a0 16       	cp	r10, r16
 3ce:	b1 06       	cpc	r11, r17
 3d0:	c2 06       	cpc	r12, r18
 3d2:	d3 06       	cpc	r13, r19
 3d4:	14 f4       	brge	.+4      	; 0x3da <mapClamp+0x16e>
 3d6:	c9 01       	movw	r24, r18
 3d8:	b8 01       	movw	r22, r16
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	1f 91       	pop	r17
 3e0:	0f 91       	pop	r16
 3e2:	ff 90       	pop	r15
 3e4:	ef 90       	pop	r14
 3e6:	df 90       	pop	r13
 3e8:	cf 90       	pop	r12
 3ea:	bf 90       	pop	r11
 3ec:	af 90       	pop	r10
 3ee:	7f 90       	pop	r7
 3f0:	6f 90       	pop	r6
 3f2:	5f 90       	pop	r5
 3f4:	4f 90       	pop	r4
 3f6:	08 95       	ret

000003f8 <__mulsi3>:
 3f8:	db 01       	movw	r26, r22
 3fa:	8f 93       	push	r24
 3fc:	9f 93       	push	r25
 3fe:	27 d0       	rcall	.+78     	; 0x44e <__muluhisi3>
 400:	bf 91       	pop	r27
 402:	af 91       	pop	r26
 404:	a2 9f       	mul	r26, r18
 406:	80 0d       	add	r24, r0
 408:	91 1d       	adc	r25, r1
 40a:	a3 9f       	mul	r26, r19
 40c:	90 0d       	add	r25, r0
 40e:	b2 9f       	mul	r27, r18
 410:	90 0d       	add	r25, r0
 412:	11 24       	eor	r1, r1
 414:	08 95       	ret

00000416 <__divmodsi4>:
 416:	05 2e       	mov	r0, r21
 418:	97 fb       	bst	r25, 7
 41a:	16 f4       	brtc	.+4      	; 0x420 <__divmodsi4+0xa>
 41c:	00 94       	com	r0
 41e:	0f d0       	rcall	.+30     	; 0x43e <__negsi2>
 420:	57 fd       	sbrc	r21, 7
 422:	05 d0       	rcall	.+10     	; 0x42e <__divmodsi4_neg2>
 424:	1e d0       	rcall	.+60     	; 0x462 <__udivmodsi4>
 426:	07 fc       	sbrc	r0, 7
 428:	02 d0       	rcall	.+4      	; 0x42e <__divmodsi4_neg2>
 42a:	46 f4       	brtc	.+16     	; 0x43c <__divmodsi4_exit>
 42c:	08 c0       	rjmp	.+16     	; 0x43e <__negsi2>

0000042e <__divmodsi4_neg2>:
 42e:	50 95       	com	r21
 430:	40 95       	com	r20
 432:	30 95       	com	r19
 434:	21 95       	neg	r18
 436:	3f 4f       	sbci	r19, 0xFF	; 255
 438:	4f 4f       	sbci	r20, 0xFF	; 255
 43a:	5f 4f       	sbci	r21, 0xFF	; 255

0000043c <__divmodsi4_exit>:
 43c:	08 95       	ret

0000043e <__negsi2>:
 43e:	90 95       	com	r25
 440:	80 95       	com	r24
 442:	70 95       	com	r23
 444:	61 95       	neg	r22
 446:	7f 4f       	sbci	r23, 0xFF	; 255
 448:	8f 4f       	sbci	r24, 0xFF	; 255
 44a:	9f 4f       	sbci	r25, 0xFF	; 255
 44c:	08 95       	ret

0000044e <__muluhisi3>:
 44e:	2b d0       	rcall	.+86     	; 0x4a6 <__umulhisi3>
 450:	a5 9f       	mul	r26, r21
 452:	90 0d       	add	r25, r0
 454:	b4 9f       	mul	r27, r20
 456:	90 0d       	add	r25, r0
 458:	a4 9f       	mul	r26, r20
 45a:	80 0d       	add	r24, r0
 45c:	91 1d       	adc	r25, r1
 45e:	11 24       	eor	r1, r1
 460:	08 95       	ret

00000462 <__udivmodsi4>:
 462:	a1 e2       	ldi	r26, 0x21	; 33
 464:	1a 2e       	mov	r1, r26
 466:	aa 1b       	sub	r26, r26
 468:	bb 1b       	sub	r27, r27
 46a:	fd 01       	movw	r30, r26
 46c:	0d c0       	rjmp	.+26     	; 0x488 <__udivmodsi4_ep>

0000046e <__udivmodsi4_loop>:
 46e:	aa 1f       	adc	r26, r26
 470:	bb 1f       	adc	r27, r27
 472:	ee 1f       	adc	r30, r30
 474:	ff 1f       	adc	r31, r31
 476:	a2 17       	cp	r26, r18
 478:	b3 07       	cpc	r27, r19
 47a:	e4 07       	cpc	r30, r20
 47c:	f5 07       	cpc	r31, r21
 47e:	20 f0       	brcs	.+8      	; 0x488 <__udivmodsi4_ep>
 480:	a2 1b       	sub	r26, r18
 482:	b3 0b       	sbc	r27, r19
 484:	e4 0b       	sbc	r30, r20
 486:	f5 0b       	sbc	r31, r21

00000488 <__udivmodsi4_ep>:
 488:	66 1f       	adc	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	88 1f       	adc	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	1a 94       	dec	r1
 492:	69 f7       	brne	.-38     	; 0x46e <__udivmodsi4_loop>
 494:	60 95       	com	r22
 496:	70 95       	com	r23
 498:	80 95       	com	r24
 49a:	90 95       	com	r25
 49c:	9b 01       	movw	r18, r22
 49e:	ac 01       	movw	r20, r24
 4a0:	bd 01       	movw	r22, r26
 4a2:	cf 01       	movw	r24, r30
 4a4:	08 95       	ret

000004a6 <__umulhisi3>:
 4a6:	a2 9f       	mul	r26, r18
 4a8:	b0 01       	movw	r22, r0
 4aa:	b3 9f       	mul	r27, r19
 4ac:	c0 01       	movw	r24, r0
 4ae:	a3 9f       	mul	r26, r19
 4b0:	01 d0       	rcall	.+2      	; 0x4b4 <__umulhisi3+0xe>
 4b2:	b2 9f       	mul	r27, r18
 4b4:	70 0d       	add	r23, r0
 4b6:	81 1d       	adc	r24, r1
 4b8:	11 24       	eor	r1, r1
 4ba:	91 1d       	adc	r25, r1
 4bc:	08 95       	ret

000004be <ccp_write_io>:
 4be:	dc 01       	movw	r26, r24
 4c0:	28 ed       	ldi	r18, 0xD8	; 216
 4c2:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__RODATA_PM_OFFSET__+0x7f8034>
 4c6:	6c 93       	st	X, r22
 4c8:	08 95       	ret

000004ca <_exit>:
 4ca:	f8 94       	cli

000004cc <__stop_program>:
 4cc:	ff cf       	rjmp	.-2      	; 0x4cc <__stop_program>
