
PortableLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803f00  00803f00  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00803f00  00803f00  000001c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000238  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025bd  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001804  00000000  00000000  0000284d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ec  00000000  00000000  00004051  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00004440  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001295  00000000  00000000  000044b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000009e  00000000  00000000  00005749  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000057e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	86 c0       	rjmp	.+268    	; 0x11e <__vector_8>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	72 c0       	rjmp	.+228    	; 0xfa <__vector_10>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_clear_bss>:
  40:	2f e3       	ldi	r18, 0x3F	; 63
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	bf e3       	ldi	r27, 0x3F	; 63
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a2 30       	cpi	r26, 0x02	; 2
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	08 d0       	rcall	.+16     	; 0x62 <main>
  52:	7d c0       	rjmp	.+250    	; 0x14e <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <min>:
    }
}

uint16_t min(uint16_t a, uint16_t b)
{
	if (a > b) return b;
  56:	68 17       	cp	r22, r24
  58:	79 07       	cpc	r23, r25
  5a:	10 f4       	brcc	.+4      	; 0x60 <min+0xa>
  5c:	86 2f       	mov	r24, r22
  5e:	97 2f       	mov	r25, r23
	return a;
}
  60:	08 95       	ret

00000062 <main>:
uint16_t potVal = 0;

int main(void)
{
	//setup system clock (20MHz)
	ccp_write_io((void *) & (CLKCTRL.MCLKCTRLA), 0x0);
  62:	60 e0       	ldi	r22, 0x00	; 0
  64:	80 e6       	ldi	r24, 0x60	; 96
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	6c d0       	rcall	.+216    	; 0x142 <ccp_write_io>
	ccp_write_io((void *) & (CLKCTRL.MCLKCTRLB), 0x0);
  6a:	60 e0       	ldi	r22, 0x00	; 0
  6c:	81 e6       	ldi	r24, 0x61	; 97
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	68 d0       	rcall	.+208    	; 0x142 <ccp_write_io>
	ccp_write_io((void *) & (CLKCTRL.OSC20MCTRLA), 0b10);
  72:	62 e0       	ldi	r22, 0x02	; 2
  74:	80 e7       	ldi	r24, 0x70	; 112
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	64 d0       	rcall	.+200    	; 0x142 <ccp_write_io>
	while(CLKCTRL.MCLKSTATUS & 1);
  7a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__RODATA_PM_OFFSET__+0x7f8063>
  7e:	80 fd       	sbrc	r24, 0
  80:	fc cf       	rjmp	.-8      	; 0x7a <main+0x18>
	
	TCA0.SINGLE.CTRLA = TCA_SINGLE_ENABLE_bm;
  82:	e0 e0       	ldi	r30, 0x00	; 0
  84:	fa e0       	ldi	r31, 0x0A	; 10
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	80 83       	st	Z, r24
	TCA0.SINGLE.CTRLB = TCA_SINGLE_WGMODE_SINGLESLOPE_gc;
  8a:	83 e0       	ldi	r24, 0x03	; 3
  8c:	81 83       	std	Z+1, r24	; 0x01
	TCA0.SINGLE.INTCTRL = TCA_SINGLE_CMP0_bm | TCA_SINGLE_OVF_bm;
  8e:	91 e1       	ldi	r25, 0x11	; 17
  90:	92 87       	std	Z+10, r25	; 0x0a
	TCA0.SINGLE.PER = 0x3FF;
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	33 e0       	ldi	r19, 0x03	; 3
  96:	26 a3       	std	Z+38, r18	; 0x26
  98:	37 a3       	std	Z+39, r19	; 0x27
	LED_PWM(2);
  9a:	22 e0       	ldi	r18, 0x02	; 2
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	20 a7       	std	Z+40, r18	; 0x28
  a0:	31 a7       	std	Z+41, r19	; 0x29
	
	VREF.CTRLA = VREF_ADC0REFSEL_0V55_gc;
  a2:	e0 ea       	ldi	r30, 0xA0	; 160
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	10 82       	st	Z, r1
	VREF.CTRLB = VREF_ADC0REFSEL_0_bm;
  a8:	90 e1       	ldi	r25, 0x10	; 16
  aa:	91 83       	std	Z+1, r25	; 0x01
	
	ADC0.CTRLA = ADC_RUNSTBY_bm | ADC_ENABLE_bm;
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f6 e0       	ldi	r31, 0x06	; 6
  b0:	91 e8       	ldi	r25, 0x81	; 129
  b2:	90 83       	st	Z, r25
	ADC0.CTRLC = ADC_PRESC_DIV32_gc | ADC_REFSEL_VDDREF_gc;
  b4:	94 e1       	ldi	r25, 0x14	; 20
  b6:	92 83       	std	Z+2, r25	; 0x02
	ADC0.CTRLD = ADC_INITDLY_DLY16_gc;
  b8:	90 e2       	ldi	r25, 0x20	; 32
  ba:	93 83       	std	Z+3, r25	; 0x03
	ADC0.MUXPOS = ADC_MUXPOS_AIN3_gc;
  bc:	86 83       	std	Z+6, r24	; 0x06
	
    PORTA.DIRSET = 1 << 2;
  be:	84 e0       	ldi	r24, 0x04	; 4
  c0:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__RODATA_PM_OFFSET__+0x7f8401>
	
	sei();
  c4:	78 94       	sei
	
    while (1) 
    {
		if (~ADC0.COMMAND & ADC_STCONV_bm)
  c6:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
  ca:	80 fd       	sbrc	r24, 0
  cc:	0a c0       	rjmp	.+20     	; 0xe2 <__EEPROM_REGION_LENGTH__+0x62>
		{
			potVal = ADC0.RES;
  ce:	e0 e0       	ldi	r30, 0x00	; 0
  d0:	f6 e0       	ldi	r31, 0x06	; 6
  d2:	80 89       	ldd	r24, Z+16	; 0x10
  d4:	91 89       	ldd	r25, Z+17	; 0x11
  d6:	80 93 00 3f 	sts	0x3F00, r24	; 0x803f00 <__DATA_REGION_ORIGIN__>
  da:	90 93 01 3f 	sts	0x3F01, r25	; 0x803f01 <__DATA_REGION_ORIGIN__+0x1>
			ADC0.COMMAND = ADC_STCONV_bm;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	80 87       	std	Z+8, r24	; 0x08
		}
		
		LED_PWM(min(potVal, 600));
  e2:	68 e5       	ldi	r22, 0x58	; 88
  e4:	72 e0       	ldi	r23, 0x02	; 2
  e6:	80 91 00 3f 	lds	r24, 0x3F00	; 0x803f00 <__DATA_REGION_ORIGIN__>
  ea:	90 91 01 3f 	lds	r25, 0x3F01	; 0x803f01 <__DATA_REGION_ORIGIN__+0x1>
  ee:	b3 df       	rcall	.-154    	; 0x56 <min>
  f0:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__RODATA_PM_OFFSET__+0x7f8a28>
  f4:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__RODATA_PM_OFFSET__+0x7f8a29>
    }
  f8:	e6 cf       	rjmp	.-52     	; 0xc6 <__EEPROM_REGION_LENGTH__+0x46>

000000fa <__vector_10>:
	if (a > b) return b;
	return a;
}

ISR(TCA0_CMP0_vect)
{
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	8f 93       	push	r24
	PORTA.OUTCLR = 1 << 2;
 106:	84 e0       	ldi	r24, 0x04	; 4
 108:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__RODATA_PM_OFFSET__+0x7f8406>
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_CMP0_bm;
 10c:	80 e1       	ldi	r24, 0x10	; 16
 10e:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7f8a0b>
}
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <__vector_8>:

ISR(TCA0_OVF_vect)
{
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
	PORTA.OUTSET = 1 << 2;
 12a:	84 e0       	ldi	r24, 0x04	; 4
 12c:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__RODATA_PM_OFFSET__+0x7f8405>
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7f8a0b>
}
 136:	8f 91       	pop	r24
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <ccp_write_io>:
 142:	dc 01       	movw	r26, r24
 144:	28 ed       	ldi	r18, 0xD8	; 216
 146:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__RODATA_PM_OFFSET__+0x7f8034>
 14a:	6c 93       	st	X, r22
 14c:	08 95       	ret

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
