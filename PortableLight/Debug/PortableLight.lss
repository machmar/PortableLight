
PortableLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803f00  00803f00  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002287  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000017c7  00000000  00000000  0000248f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ff  00000000  00000000  00003c56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00004058  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000f1d  00000000  00000000  000040bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000078  00000000  00000000  00004fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00005051  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	58 c0       	rjmp	.+176    	; 0xc2 <__vector_8>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	44 c0       	rjmp	.+136    	; 0x9e <__vector_10>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62
  40:	02 d0       	rcall	.+4      	; 0x46 <main>
  42:	57 c0       	rjmp	.+174    	; 0xf2 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <main>:


int main(void)
{
	//setup system clock (20MHz)
	ccp_write_io((void *) & (CLKCTRL.MCLKCTRLA), 0x0);
  46:	60 e0       	ldi	r22, 0x00	; 0
  48:	80 e6       	ldi	r24, 0x60	; 96
  4a:	90 e0       	ldi	r25, 0x00	; 0
  4c:	4c d0       	rcall	.+152    	; 0xe6 <ccp_write_io>
	ccp_write_io((void *) & (CLKCTRL.MCLKCTRLB), 0x0);
  4e:	60 e0       	ldi	r22, 0x00	; 0
  50:	81 e6       	ldi	r24, 0x61	; 97
  52:	90 e0       	ldi	r25, 0x00	; 0
  54:	48 d0       	rcall	.+144    	; 0xe6 <ccp_write_io>
	ccp_write_io((void *) & (CLKCTRL.OSC20MCTRLA), 0b10);
  56:	62 e0       	ldi	r22, 0x02	; 2
  58:	80 e7       	ldi	r24, 0x70	; 112
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	44 d0       	rcall	.+136    	; 0xe6 <ccp_write_io>
	while(CLKCTRL.MCLKSTATUS & 1);
  5e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__RODATA_PM_OFFSET__+0x7f8063>
  62:	80 fd       	sbrc	r24, 0
  64:	fc cf       	rjmp	.-8      	; 0x5e <main+0x18>
	
	TCA0.SINGLE.CTRLA = TCA_SINGLE_ENABLE_bm;
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	81 e0       	ldi	r24, 0x01	; 1
  6c:	80 83       	st	Z, r24
	TCA0.SINGLE.CTRLB = TCA_SINGLE_WGMODE_SINGLESLOPE_gc;
  6e:	83 e0       	ldi	r24, 0x03	; 3
  70:	81 83       	std	Z+1, r24	; 0x01
	TCA0.SINGLE.INTCTRL = TCA_SINGLE_CMP0_bm | TCA_SINGLE_OVF_bm;
  72:	81 e1       	ldi	r24, 0x11	; 17
  74:	82 87       	std	Z+10, r24	; 0x0a
	TCA0.SINGLE.PER = 0x3FF;
  76:	8f ef       	ldi	r24, 0xFF	; 255
  78:	93 e0       	ldi	r25, 0x03	; 3
  7a:	86 a3       	std	Z+38, r24	; 0x26
  7c:	97 a3       	std	Z+39, r25	; 0x27
	TCA0.SINGLE.CMP0 = 0x3FF;
  7e:	80 a7       	std	Z+40, r24	; 0x28
  80:	91 a7       	std	Z+41, r25	; 0x29
	
    PORTA.DIRSET = 1 << 2;
  82:	84 e0       	ldi	r24, 0x04	; 4
  84:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__RODATA_PM_OFFSET__+0x7f8401>
	
	sei();
  88:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	2f ef       	ldi	r18, 0xFF	; 255
  8c:	88 e0       	ldi	r24, 0x08	; 8
  8e:	9d e3       	ldi	r25, 0x3D	; 61
  90:	21 50       	subi	r18, 0x01	; 1
  92:	80 40       	sbci	r24, 0x00	; 0
  94:	90 40       	sbci	r25, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <__EEPROM_REGION_LENGTH__+0x10>
  98:	00 c0       	rjmp	.+0      	; 0x9a <__EEPROM_REGION_LENGTH__+0x1a>
  9a:	00 00       	nop
  9c:	f6 cf       	rjmp	.-20     	; 0x8a <__EEPROM_REGION_LENGTH__+0xa>

0000009e <__vector_10>:
		_delay_ms(1000);
    }
}

ISR(TCA0_CMP0_vect)
{
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	8f 93       	push	r24
	PORTA.OUTCLR = 1 << 2;
  aa:	84 e0       	ldi	r24, 0x04	; 4
  ac:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__RODATA_PM_OFFSET__+0x7f8406>
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_CMP0_bm;
  b0:	80 e1       	ldi	r24, 0x10	; 16
  b2:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7f8a0b>
}
  b6:	8f 91       	pop	r24
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	0f 90       	pop	r0
  be:	1f 90       	pop	r1
  c0:	18 95       	reti

000000c2 <__vector_8>:

ISR(TCA0_OVF_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
	PORTA.OUTSET = 1 << 2;
  ce:	84 e0       	ldi	r24, 0x04	; 4
  d0:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__RODATA_PM_OFFSET__+0x7f8405>
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7f8a0b>
}
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <ccp_write_io>:
  e6:	dc 01       	movw	r26, r24
  e8:	28 ed       	ldi	r18, 0xD8	; 216
  ea:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__RODATA_PM_OFFSET__+0x7f8034>
  ee:	6c 93       	st	X, r22
  f0:	08 95       	ret

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
